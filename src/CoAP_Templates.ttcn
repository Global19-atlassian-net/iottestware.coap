/******************************************************************************
* Copyright (c) 2018  Fraunhofer FOKUS
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*		Avdoot Chalke
*		Sascha Hackel
*		Axel Rennoch
*		Alexander Kaiser
******************************************************************************/

module CoAP_Templates {

import from CoAP_Types all;
import from CoAP_CustomTypes all;
import from CoAP_Const all;
import from IPL4asp_Types all;

template ASP_RecvFrom m_dataReceive (octetstring p_msg) := 
{
  connId := ?,
  remName := ?,
  remPort := ?,
  locName := ?,
  locPort := ?,
  proto := ?,
  userData := ?,
  msg := p_msg
}

template ASP_Send m_dataConnect(integer p_id, octetstring p_msg)  :=
{
  connId := p_id,
  proto:= omit,
  msg := p_msg
}

group utilGroup
{
  template CoAP_Types.CoAP_Message m_coapMessageWrapper(template CoAP_Types.CoAP_ReqResp p_msg) :=
  {
    msg := p_msg
  }
  
  template CoAP_OptionsExt m_defaultOptionsExt(INT_BIT4_MSB p_optionDelta, INT_BIT4_MSB p_optionLength, INT_BIT8_OR_BIT16_MSB p_option_ext, template (value) CoAP_Options p_options) :=
  {
    option_delta := p_optionDelta,
    option_length := p_optionLength,
    option_delta_ext := omit,
    option_length_ext := p_option_ext,
    option_value := p_options
  }
}


group headerGroup
{
  group requestHeaderGroup
  {
    template CoAPHeader m_coapBaseHeader :=
    {
      version := c_defaultHeaderVersion, // must set to 1
      msg_type := RESET,
      tkl := c_emptyTokenLength,
      code := EMPTY_MESSAGE,
      message_id := c_defaultHeaderMessageId
    }

    template CoAPHeader m_coapHeaderWithTypeAndCode(Type p_msgType, Code p_code)
    modifies m_coapBaseHeader :=
    {
      msg_type := p_msgType,
      code := p_code
    }

    template CoAPHeader m_coapHeaderWithMessageId(Type p_msgType, Code p_code, integer p_msgId)
    modifies m_coapHeaderWithTypeAndCode :=
    {
      message_id := p_msgId
    }
  }

  group responseHeaderGroup
  {
    // TODO
  }
}

group messageGroup
{
  group requestMessage
  {
    template CoAP_ReqResp m_coapEmptyMessage :=
    {
      version := c_defaultHeaderVersion, // must set to 1
      msg_type := RESET,
      tkl := c_emptyTokenLength,
      code := EMPTY_MESSAGE,
      message_id := c_defaultHeaderMessageId,
      token := c_emptyToken,
      options := omit,
      payload := omit
    }

    template CoAP_ReqResp m_coapPingMessage
    modifies m_coapEmptyMessage :=
    {
      msg_type := CONFIRMABLE
    }
    
    template CoAP_ReqResp m_clientAckMessage
    modifies m_coapEmptyMessage :=
    {
      msg_type := ACKNOWLEDGEMENT
    }
    
    template CoAP_ReqResp m_coapInvalidHeaderVersion
    modifies m_coapPingMessage :=
    {
      version := c_invalidHeaderVersion
    }
    
    template CoAP_ReqResp m_coapInvalidHeaderTokenLength
    modifies m_coapPingMessage :=
    {
      tkl := c_invalidTokenLength
    }

    template CoAP_ReqResp m_coapRequestMessageWithOptions(template (value) CoAPHeader p_header, template CoAP_OptionsExtList p_options)
    modifies m_coapEmptyMessage :=
    {
      msg_type := p_header.msg_type,
      code := p_header.code,
      options := p_options,
      payload := omit
    }
    
    template CoAP_ReqResp m_coapBaseRequestMessage(template (value) CoAPHeader p_header, template CoAP_OptionsExtList p_options, Payload p_payload)
    modifies m_coapRequestMessageWithOptions :=
    {
      payload := p_payload
    }
  }

  group responseMessage
  {
    template CoAP_ReqResp mw_coapAckResponseMessage(Code p_code) :=
    {
      version := c_defaultHeaderVersion, // must set to 1
      msg_type := ACKNOWLEDGEMENT,
      tkl := ?,
      code := p_code,
      message_id := c_defaultHeaderMessageId,
      token := ?,
      options := *,
      payload := *
    }

    template CoAP_ReqResp mw_coapResonseMessageWithOptions(Code p_code, template CoAP_OptionsExtList p_options)
    modifies mw_coapAckResponseMessage :=
    {
      options := p_options
    }

    template CoAP_ReqResp mw_coapResonseMessageWithPayload(Code p_code, Payload p_payload)
    modifies mw_coapAckResponseMessage :=
    {
      payload := p_payload
    }

    template CoAP_ReqResp mw_coapResponseMessageNon(Code p_code)
    modifies mw_coapAckResponseMessage :=
    {
      msg_type := NON_CONFIRMABLE
    }
    
    template CoAP_ReqResp mw_coapResponseMessageNonWithOptions(Code p_code, in template CoAP_OptionsExtList p_options)
    modifies mw_coapResponseMessageNon :=
    {
      options := p_options
    }
    
    template CoAP_ReqResp mw_coapResponseMessageNonWithPayload(Code p_code, Payload p_payload)
    modifies mw_coapResponseMessageNon :=
    {
      payload := p_payload
    }
    
    
    
    template CoAP_ReqResp mw_coapResponseMessageSeparate(Code p_code)
    modifies mw_coapAckResponseMessage :=
    {
      msg_type := CONFIRMABLE,
      code := p_code
    }
    
    template CoAP_ReqResp mw_coapResponseMessageSeparateWithOptions(Code p_code, template CoAP_OptionsExtList p_options)
    modifies mw_coapResponseMessageSeparate :=
    {
      options := p_options
    }
    
    template CoAP_ReqResp mw_coapResponseMessageSeparateWithPayload(Code p_code, Payload p_payload)
    modifies mw_coapResponseMessageSeparate :=
    {
      payload := p_payload
    }
  }
}
}
