/******************************************************************************
* Copyright (c) 2018  Fraunhofer FOKUS
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*		Avdoot Chalke
*		Sascha Hackel
*		Axel Rennoch
*		Alexander Kaiser
******************************************************************************/

module CoAP_Functions {
import from CoAP_CustomTypes all;
import from CoAP_Pixits all;
import from CoAP_Const all;
import from CoAP_Templates all;
import from CoAP_TestSystem all;
import from CoAP_Types all;
import from IPL4asp_PortType all;
import from IPL4asp_Types all;

/*
 * Pass the verdict of a given CoAP message and the expected template.
 */
function f_passVerdict(CoAP_Message p_msg, template CoAP_ReqResp p_expected) runs on MTC_CT 
{  
  if(match(p_msg, m_coapMessageWrapper(p_expected)))
  {
    setverdict(pass);
  }
  else 
  {
    setverdict(fail);
  }
}

function f_connect() runs on MTC_CT
{
  vc_result := f_IPL4_connect (p, PX_SERVER_HOST, PX_SERVER_PORT, "",0,-1,{udp := {}});
  vc_cid := vc_result.connId;
  if (not(ispresent(vc_cid))) 
  {
    log ("Could not connect");
    stop;
  } 
}

function f_sendMessage(in template CoAP_ReqResp p_request) runs on MTC_CT
{ 
  f_connect();
  vc_msg := {msg := valueof(p_request)};
  vc_encResult := f_CoAP_enc(vc_msg, vc_payload);
  p.send(m_dataConnect(vc_cid, vc_payload));
}

function f_receiveMessage(template CoAP_ReqResp p_expected) runs on MTC_CT
{
  t_ackTimeout.start;   
  alt 
  {
    [] p.receive (ASP_RecvFrom:?) -> value vc_ASP_RecvFrom               
    {     
      vc_decResult := f_CoAP_dec(vc_ASP_RecvFrom.msg,vc_msg);
      if (vc_decResult==0)       
      {                
        f_passVerdict(vc_msg, p_expected);
      }
      t_ackTimeout.stop; 
    }
    [not ispresent(p_expected)] t_ackTimeout.timeout
    {
      setverdict(pass);
    }
    [] t_ackTimeout.timeout
    {
      setverdict(inconc, "Timer elapsed!");
    }
  }
}

/*
 * Calculates the option length and option length (extended) of the length of the given option value.
 */
function f_calcOptionLength(integer p_optionValueLength, out INT_BIT4_MSB p_optionLength, out INT_BIT8_OR_BIT16_MSB p_optionLengthExt)
{
  if(p_optionValueLength <= c_maxOptionLength)
  {
    p_optionLength := p_optionValueLength;
    p_optionLengthExt.int_bit8 := 0;
  }
  else
  {
    var integer v_resultExt := p_optionValueLength - c_maxOptionLength;
    p_optionLength := c_maxOptionLength;
    if(v_resultExt <= 255)
    {
      p_optionLengthExt.int_bit8 := v_resultExt;
    }
    else
    {
      p_optionLengthExt.int_bit16 := v_resultExt;
    }
  }
}

/*
 * Calculates the option delta of the given option by its option number an the previous opton number.
 * If it is the first option, the previous option number is 0 as specified in the RFC7252.
 */
function f_calculateOptionDelta(INT_BIT4_MSB p_optionNumber, inout INT_BIT4_MSB p_previousOptionNumber)
return INT_BIT4_MSB
{
  if(p_optionNumber == p_previousOptionNumber)
  {
    return 0;
  }
  var INT_BIT4_MSB v_result := p_optionNumber - p_previousOptionNumber;
  p_previousOptionNumber := p_optionNumber;
  
  return v_result;
}

/*
 * Gets the correct format for each option that is included in the given option list.
 * The function claculates the needed fields to send options as specified in {@reference https://tools.ietf.org/html/rfc7252#section-3.1}.
 * It returns a set of options in the correct format.
 * TODO: include calculation of field deltaExt
 */
function f_getOptionList(CoapOptionList p_optionList, inout INT_BIT4_MSB p_previousOptionNumber)
return template CoAP_OptionsExtList
{
  var INT_BIT4_MSB v_optionDelta;
  var INT_BIT4_MSB v_optionLength;
  var INT_BIT4_MSB v_optionNumber;
  var INT_BIT8_OR_BIT16_MSB v_optionLengthExt;
  
  var template CoAP_OptionsExt v_optionsExt;
  var template CoAP_OptionsExtList v_result;
  
  for(var integer v_i := 0; v_i < lengthof(p_optionList); v_i:=v_i+1)
  {
    var CoAP_Options v_currentOption := p_optionList[v_i];
    f_calcOptionLength(f_getPathQueryLength(v_currentOption, v_optionNumber), v_optionLength, v_optionLengthExt);
    v_optionDelta := f_calculateOptionDelta(v_optionNumber, p_previousOptionNumber);
  	v_optionsExt := m_defaultOptionsExt(v_optionDelta, v_optionLength, v_optionLengthExt, p_optionList[v_i]);
  	v_result[v_i] := v_optionsExt;
  }
  return v_result;
}

/*
 * This function is needed as different CoAP option may have different types.
 * The length of the option is calculated based on its type.
 * Furthermore it provides the option number that is needed to calculate the option delta.
 * TODO: complete option list
 */
function f_getPathQueryLength(in CoAP_Options p_option, out INT_BIT4_MSB p_optionNumber)
return integer
{
  select union (p_option)
  {
    case(location_path)
    {
      p_optionNumber := c_locationPathOptionNumber;
      return lengthof(p_option.location_path);
    }
    case(uri_path)
    {
      p_optionNumber := c_uriPathOptionNumber;
      return lengthof(p_option.uri_path);
    }
    case else {log("Error! Unhandled anytype variant in union."); return -1;}
  }
}

}

