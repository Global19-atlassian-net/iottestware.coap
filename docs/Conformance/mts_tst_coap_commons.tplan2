/******************************************************************************
* Copyright (c) 2018  Fraunhofer FOKUS
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     Sascha Hackel
******************************************************************************/

Package mts_tst_coap_commons {
	Domain {
		pics:
		- PIC_Server
		- PIC_Client
		- PIC_ETag_support
		;
		entities:
		- IUT
		- client
		- server
		;
		events:
		- receives
		- sends
		- provide
		- responds
		- implement
		- times_out
		- rejects
		- respond 
		- retransmit
		- set
		- wait
		- process
		- informed
		- conditions
		- present
		;
		event templates :
		- provideResource { the IUT entity provide a resource containing name indicating value DEFAULT_RESOURCE; }
		- receiveCoapHeader { the IUT entity receives a request message containing 
                                 version indicating value 1,
                                 msg_type indicating value CONfirmable,
                                 token_length indicating value 0,
                                 code indicating value EMPTY_METHOD,
                                 msg_id corresponding to MSG_ID1;
                            }
		;
	}
	Data {
		type STRING;
		type CODE; //CoAP code with pattern c.dd
		type MSG; //CoAP message type
		type PAYLOAD; //CoAP payload
		type PARAMETER; //CoAP Protocol Parameter (sec. 4.8)
		type OPTION; //CoAP option
		type UINT4; //4-bit integer
		type UINT16; //16-bit unsigned integer
		type OCT0_8; //8 byte octetstring
		type HEX; //hexadecimal number
			
		/* 
		 * Data representing module parameter.
		 * Will be set for every SUT appropriately.
		 */
		STRING DEFAULT_RESOURCE; //must implement at least the GET method
		STRING METHOD_NOT_ALLOWED_RESOURCE; //resource that doesn't implement METHOD
		STRING ANY_RESOURCE; //resource that is not available on IUT (note: may generate randomly)
		STRING NEW_RESOURCE; 
		STRING STORAGE_RESOURCE; //resource that allows creation via PUT or POST
		STRING DELETE_RESOURCE; //resource that allows the DELETE method
		STRING SECOND_LVL_RESOURCE;
		STRING SEPARATE_RESOURCE;
		STRING THIRD_LVL_RESOURCE;
		STRING DEFAULT_HOST;
		STRING DEFAULT_PORT;
		STRING PROXY_URI;
		STRING URI_HOST;
		STRING HTTP_URI;
		STRING DEFAULT_RESOURCE_CONTENT; //content of the default resource
		
		MSG CONfirmable; //0
		MSG NONconfirmable; //1
		MSG ACKnowledgement; //2
		MSG ReSeT; //3
		
		CODE EMPTY_METHOD; //0.00
		CODE GET_METHOD; //0.01
		CODE POST_METHOD; //0.02
		CODE PUT_METHOD; //0.03
		CODE DELETE_METHOD; //0.04
		CODE CREATED; //2.01
		CODE DELETED; //2.02
		CODE VALID; //2.03
		CODE CHANGED; //2.04
		CODE CONTENT; //2.05
		CODE BAD_REQUEST; //4.00
		CODE BAD_OPTION; //4.02
		CODE NOT_FOUND; //4.04
		CODE METHOD_NOT_ALLOWED; //4.05
		CODE NOT_ACCEPTABLE; //4.06
		CODE PRECONDITION_FAILED; //4.12
		CODE REQUEST_ENTITY_TOO_LARGE; //4.13
		CODE UNSUPPORTED_CONTENT_FORMAT; //4.15
		CODE NOT_IMPLEMENTED; //5.01
		CODE BAD_GATEWAY; //5.02
		CODE GATEWAY_TIMEOUT; //5.04
		CODE PROXYING_NOT_SUPPORTED; //5.05
		
		CODE PUT_OR_POST; //depending on implemented METHOD of STORAGE_RESOURCE, either PUT or POST
		
		UINT4 LENGTH_TOKEN; //length of the given TOKEN (0-8 bytes)
		UINT4 LENGTH_TOKEN_INVALID; //length not corresponding to actual TOKEN length 
		UINT4 LENGTH_TOKEN_RESERVED; //reserved value for token length (9-15 bytes)
		
		UINT16 MSG_ID1; //ID to match request and response. It is generated by the sender of a CON or NON message.
		UINT16 MSG_ID2;
		
		OCT0_8 TOKEN;
		
		HEX PAYLOAD_MARKER; //payload marker is 0xFF
		
		OPTION ANY_OPTION; //not specified option needed for the sake of completeness
		OPTION UNRECOGNIZED_ELECTIVE_OPTION; //an unrecognized elective option
		
		PAYLOAD EMPTY_PAYLOAD; //zero-length payload
		PAYLOAD ANY_PAYLOAD; //not specified payload needed for the sake of completeness
		
		PARAMETER ACK_TIMEOUT; //Timeout in sec during an ACK message is expected; default = 2 sec
		PARAMETER ACK_RANDOM_FACTOR; //factor used to calculate some timing values; default = 1.5 sec
		PARAMETER MAX_RETRANSMIT; //max number of retransmission; default = 4
	}	 
}